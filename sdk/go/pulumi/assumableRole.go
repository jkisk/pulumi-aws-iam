// *** WARNING: this file was generated by Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package pulumi

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AssumableRole struct {
	pulumi.ResourceState
}

// NewAssumableRole registers a new resource with the given unique name, arguments, and options.
func NewAssumableRole(ctx *pulumi.Context,
	name string, args *AssumableRoleArgs, opts ...pulumi.ResourceOption) (*AssumableRole, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AssumeRolePolicy == nil {
		return nil, errors.New("invalid value for required argument 'AssumeRolePolicy'")
	}
	var resource AssumableRole
	err := ctx.RegisterRemoteComponentResource("pulumi-aws-iam:index:AssumableRole", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type assumableRoleArgs struct {
	// Policy that grants an entity permission to assume the role.
	AssumeRolePolicy string `pulumi:"assumeRolePolicy"`
	// The role description
	Description *string `pulumi:"description"`
}

// The set of arguments for constructing a AssumableRole resource.
type AssumableRoleArgs struct {
	// Policy that grants an entity permission to assume the role.
	AssumeRolePolicy pulumi.StringInput
	// The role description
	Description pulumi.StringPtrInput
}

func (AssumableRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*assumableRoleArgs)(nil)).Elem()
}

type AssumableRoleInput interface {
	pulumi.Input

	ToAssumableRoleOutput() AssumableRoleOutput
	ToAssumableRoleOutputWithContext(ctx context.Context) AssumableRoleOutput
}

func (*AssumableRole) ElementType() reflect.Type {
	return reflect.TypeOf((*AssumableRole)(nil))
}

func (i *AssumableRole) ToAssumableRoleOutput() AssumableRoleOutput {
	return i.ToAssumableRoleOutputWithContext(context.Background())
}

func (i *AssumableRole) ToAssumableRoleOutputWithContext(ctx context.Context) AssumableRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssumableRoleOutput)
}

func (i *AssumableRole) ToAssumableRolePtrOutput() AssumableRolePtrOutput {
	return i.ToAssumableRolePtrOutputWithContext(context.Background())
}

func (i *AssumableRole) ToAssumableRolePtrOutputWithContext(ctx context.Context) AssumableRolePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssumableRolePtrOutput)
}

type AssumableRolePtrInput interface {
	pulumi.Input

	ToAssumableRolePtrOutput() AssumableRolePtrOutput
	ToAssumableRolePtrOutputWithContext(ctx context.Context) AssumableRolePtrOutput
}

type assumableRolePtrType AssumableRoleArgs

func (*assumableRolePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AssumableRole)(nil))
}

func (i *assumableRolePtrType) ToAssumableRolePtrOutput() AssumableRolePtrOutput {
	return i.ToAssumableRolePtrOutputWithContext(context.Background())
}

func (i *assumableRolePtrType) ToAssumableRolePtrOutputWithContext(ctx context.Context) AssumableRolePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssumableRolePtrOutput)
}

// AssumableRoleArrayInput is an input type that accepts AssumableRoleArray and AssumableRoleArrayOutput values.
// You can construct a concrete instance of `AssumableRoleArrayInput` via:
//
//          AssumableRoleArray{ AssumableRoleArgs{...} }
type AssumableRoleArrayInput interface {
	pulumi.Input

	ToAssumableRoleArrayOutput() AssumableRoleArrayOutput
	ToAssumableRoleArrayOutputWithContext(context.Context) AssumableRoleArrayOutput
}

type AssumableRoleArray []AssumableRoleInput

func (AssumableRoleArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*AssumableRole)(nil))
}

func (i AssumableRoleArray) ToAssumableRoleArrayOutput() AssumableRoleArrayOutput {
	return i.ToAssumableRoleArrayOutputWithContext(context.Background())
}

func (i AssumableRoleArray) ToAssumableRoleArrayOutputWithContext(ctx context.Context) AssumableRoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssumableRoleArrayOutput)
}

// AssumableRoleMapInput is an input type that accepts AssumableRoleMap and AssumableRoleMapOutput values.
// You can construct a concrete instance of `AssumableRoleMapInput` via:
//
//          AssumableRoleMap{ "key": AssumableRoleArgs{...} }
type AssumableRoleMapInput interface {
	pulumi.Input

	ToAssumableRoleMapOutput() AssumableRoleMapOutput
	ToAssumableRoleMapOutputWithContext(context.Context) AssumableRoleMapOutput
}

type AssumableRoleMap map[string]AssumableRoleInput

func (AssumableRoleMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*AssumableRole)(nil))
}

func (i AssumableRoleMap) ToAssumableRoleMapOutput() AssumableRoleMapOutput {
	return i.ToAssumableRoleMapOutputWithContext(context.Background())
}

func (i AssumableRoleMap) ToAssumableRoleMapOutputWithContext(ctx context.Context) AssumableRoleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssumableRoleMapOutput)
}

type AssumableRoleOutput struct {
	*pulumi.OutputState
}

func (AssumableRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AssumableRole)(nil))
}

func (o AssumableRoleOutput) ToAssumableRoleOutput() AssumableRoleOutput {
	return o
}

func (o AssumableRoleOutput) ToAssumableRoleOutputWithContext(ctx context.Context) AssumableRoleOutput {
	return o
}

func (o AssumableRoleOutput) ToAssumableRolePtrOutput() AssumableRolePtrOutput {
	return o.ToAssumableRolePtrOutputWithContext(context.Background())
}

func (o AssumableRoleOutput) ToAssumableRolePtrOutputWithContext(ctx context.Context) AssumableRolePtrOutput {
	return o.ApplyT(func(v AssumableRole) *AssumableRole {
		return &v
	}).(AssumableRolePtrOutput)
}

type AssumableRolePtrOutput struct {
	*pulumi.OutputState
}

func (AssumableRolePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AssumableRole)(nil))
}

func (o AssumableRolePtrOutput) ToAssumableRolePtrOutput() AssumableRolePtrOutput {
	return o
}

func (o AssumableRolePtrOutput) ToAssumableRolePtrOutputWithContext(ctx context.Context) AssumableRolePtrOutput {
	return o
}

type AssumableRoleArrayOutput struct{ *pulumi.OutputState }

func (AssumableRoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AssumableRole)(nil))
}

func (o AssumableRoleArrayOutput) ToAssumableRoleArrayOutput() AssumableRoleArrayOutput {
	return o
}

func (o AssumableRoleArrayOutput) ToAssumableRoleArrayOutputWithContext(ctx context.Context) AssumableRoleArrayOutput {
	return o
}

func (o AssumableRoleArrayOutput) Index(i pulumi.IntInput) AssumableRoleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AssumableRole {
		return vs[0].([]AssumableRole)[vs[1].(int)]
	}).(AssumableRoleOutput)
}

type AssumableRoleMapOutput struct{ *pulumi.OutputState }

func (AssumableRoleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]AssumableRole)(nil))
}

func (o AssumableRoleMapOutput) ToAssumableRoleMapOutput() AssumableRoleMapOutput {
	return o
}

func (o AssumableRoleMapOutput) ToAssumableRoleMapOutputWithContext(ctx context.Context) AssumableRoleMapOutput {
	return o
}

func (o AssumableRoleMapOutput) MapIndex(k pulumi.StringInput) AssumableRoleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) AssumableRole {
		return vs[0].(map[string]AssumableRole)[vs[1].(string)]
	}).(AssumableRoleOutput)
}

func init() {
	pulumi.RegisterOutputType(AssumableRoleOutput{})
	pulumi.RegisterOutputType(AssumableRolePtrOutput{})
	pulumi.RegisterOutputType(AssumableRoleArrayOutput{})
	pulumi.RegisterOutputType(AssumableRoleMapOutput{})
}
