// *** WARNING: this file was generated by Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package pulumiawsiam

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/iam"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type IamRoleForServiceAccount struct {
	pulumi.ResourceState

	// The IAM role created
	Role iam.RoleOutput `pulumi:"role"`
}

// NewIamRoleForServiceAccount registers a new resource with the given unique name, arguments, and options.
func NewIamRoleForServiceAccount(ctx *pulumi.Context,
	name string, args *IamRoleForServiceAccountArgs, opts ...pulumi.ResourceOption) (*IamRoleForServiceAccount, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Namespace == nil {
		return nil, errors.New("invalid value for required argument 'Namespace'")
	}
	if args.ProviderArn == nil {
		return nil, errors.New("invalid value for required argument 'ProviderArn'")
	}
	if args.ServiceAccount == nil {
		return nil, errors.New("invalid value for required argument 'ServiceAccount'")
	}
	var resource IamRoleForServiceAccount
	err := ctx.RegisterRemoteComponentResource("awsIam:index:IamRoleForServiceAccount", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type iamRoleForServiceAccountArgs struct {
	// The EKS namespace that will use the role for IAM authentication.
	Namespace string `pulumi:"namespace"`
	// The OIDC provider ARN.
	ProviderArn string `pulumi:"providerArn"`
	// The IAM path where the role exists.
	RolePath *string `pulumi:"rolePath"`
	// The EKS service account that will use the role for IAM authentication.
	ServiceAccount string `pulumi:"serviceAccount"`
}

// The set of arguments for constructing a IamRoleForServiceAccount resource.
type IamRoleForServiceAccountArgs struct {
	// The EKS namespace that will use the role for IAM authentication.
	Namespace pulumi.StringInput
	// The OIDC provider ARN.
	ProviderArn pulumi.StringInput
	// The IAM path where the role exists.
	RolePath pulumi.StringPtrInput
	// The EKS service account that will use the role for IAM authentication.
	ServiceAccount pulumi.StringInput
}

func (IamRoleForServiceAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*iamRoleForServiceAccountArgs)(nil)).Elem()
}

type IamRoleForServiceAccountInput interface {
	pulumi.Input

	ToIamRoleForServiceAccountOutput() IamRoleForServiceAccountOutput
	ToIamRoleForServiceAccountOutputWithContext(ctx context.Context) IamRoleForServiceAccountOutput
}

func (*IamRoleForServiceAccount) ElementType() reflect.Type {
	return reflect.TypeOf((**IamRoleForServiceAccount)(nil)).Elem()
}

func (i *IamRoleForServiceAccount) ToIamRoleForServiceAccountOutput() IamRoleForServiceAccountOutput {
	return i.ToIamRoleForServiceAccountOutputWithContext(context.Background())
}

func (i *IamRoleForServiceAccount) ToIamRoleForServiceAccountOutputWithContext(ctx context.Context) IamRoleForServiceAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IamRoleForServiceAccountOutput)
}

// IamRoleForServiceAccountArrayInput is an input type that accepts IamRoleForServiceAccountArray and IamRoleForServiceAccountArrayOutput values.
// You can construct a concrete instance of `IamRoleForServiceAccountArrayInput` via:
//
//          IamRoleForServiceAccountArray{ IamRoleForServiceAccountArgs{...} }
type IamRoleForServiceAccountArrayInput interface {
	pulumi.Input

	ToIamRoleForServiceAccountArrayOutput() IamRoleForServiceAccountArrayOutput
	ToIamRoleForServiceAccountArrayOutputWithContext(context.Context) IamRoleForServiceAccountArrayOutput
}

type IamRoleForServiceAccountArray []IamRoleForServiceAccountInput

func (IamRoleForServiceAccountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IamRoleForServiceAccount)(nil)).Elem()
}

func (i IamRoleForServiceAccountArray) ToIamRoleForServiceAccountArrayOutput() IamRoleForServiceAccountArrayOutput {
	return i.ToIamRoleForServiceAccountArrayOutputWithContext(context.Background())
}

func (i IamRoleForServiceAccountArray) ToIamRoleForServiceAccountArrayOutputWithContext(ctx context.Context) IamRoleForServiceAccountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IamRoleForServiceAccountArrayOutput)
}

// IamRoleForServiceAccountMapInput is an input type that accepts IamRoleForServiceAccountMap and IamRoleForServiceAccountMapOutput values.
// You can construct a concrete instance of `IamRoleForServiceAccountMapInput` via:
//
//          IamRoleForServiceAccountMap{ "key": IamRoleForServiceAccountArgs{...} }
type IamRoleForServiceAccountMapInput interface {
	pulumi.Input

	ToIamRoleForServiceAccountMapOutput() IamRoleForServiceAccountMapOutput
	ToIamRoleForServiceAccountMapOutputWithContext(context.Context) IamRoleForServiceAccountMapOutput
}

type IamRoleForServiceAccountMap map[string]IamRoleForServiceAccountInput

func (IamRoleForServiceAccountMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IamRoleForServiceAccount)(nil)).Elem()
}

func (i IamRoleForServiceAccountMap) ToIamRoleForServiceAccountMapOutput() IamRoleForServiceAccountMapOutput {
	return i.ToIamRoleForServiceAccountMapOutputWithContext(context.Background())
}

func (i IamRoleForServiceAccountMap) ToIamRoleForServiceAccountMapOutputWithContext(ctx context.Context) IamRoleForServiceAccountMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IamRoleForServiceAccountMapOutput)
}

type IamRoleForServiceAccountOutput struct{ *pulumi.OutputState }

func (IamRoleForServiceAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IamRoleForServiceAccount)(nil)).Elem()
}

func (o IamRoleForServiceAccountOutput) ToIamRoleForServiceAccountOutput() IamRoleForServiceAccountOutput {
	return o
}

func (o IamRoleForServiceAccountOutput) ToIamRoleForServiceAccountOutputWithContext(ctx context.Context) IamRoleForServiceAccountOutput {
	return o
}

type IamRoleForServiceAccountArrayOutput struct{ *pulumi.OutputState }

func (IamRoleForServiceAccountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IamRoleForServiceAccount)(nil)).Elem()
}

func (o IamRoleForServiceAccountArrayOutput) ToIamRoleForServiceAccountArrayOutput() IamRoleForServiceAccountArrayOutput {
	return o
}

func (o IamRoleForServiceAccountArrayOutput) ToIamRoleForServiceAccountArrayOutputWithContext(ctx context.Context) IamRoleForServiceAccountArrayOutput {
	return o
}

func (o IamRoleForServiceAccountArrayOutput) Index(i pulumi.IntInput) IamRoleForServiceAccountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IamRoleForServiceAccount {
		return vs[0].([]*IamRoleForServiceAccount)[vs[1].(int)]
	}).(IamRoleForServiceAccountOutput)
}

type IamRoleForServiceAccountMapOutput struct{ *pulumi.OutputState }

func (IamRoleForServiceAccountMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IamRoleForServiceAccount)(nil)).Elem()
}

func (o IamRoleForServiceAccountMapOutput) ToIamRoleForServiceAccountMapOutput() IamRoleForServiceAccountMapOutput {
	return o
}

func (o IamRoleForServiceAccountMapOutput) ToIamRoleForServiceAccountMapOutputWithContext(ctx context.Context) IamRoleForServiceAccountMapOutput {
	return o
}

func (o IamRoleForServiceAccountMapOutput) MapIndex(k pulumi.StringInput) IamRoleForServiceAccountOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IamRoleForServiceAccount {
		return vs[0].(map[string]*IamRoleForServiceAccount)[vs[1].(string)]
	}).(IamRoleForServiceAccountOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IamRoleForServiceAccountInput)(nil)).Elem(), &IamRoleForServiceAccount{})
	pulumi.RegisterInputType(reflect.TypeOf((*IamRoleForServiceAccountArrayInput)(nil)).Elem(), IamRoleForServiceAccountArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IamRoleForServiceAccountMapInput)(nil)).Elem(), IamRoleForServiceAccountMap{})
	pulumi.RegisterOutputType(IamRoleForServiceAccountOutput{})
	pulumi.RegisterOutputType(IamRoleForServiceAccountArrayOutput{})
	pulumi.RegisterOutputType(IamRoleForServiceAccountMapOutput{})
}
