// *** WARNING: this file was generated by Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class AssumableRole extends pulumi.ComponentResource {
    /** @internal */
    public static readonly __pulumiType = 'awsIam:index:AssumableRole';

    /**
     * Returns true if the given object is an instance of AssumableRole.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AssumableRole {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AssumableRole.__pulumiType;
    }

    /**
     * Amazon Resource Name (ARN) specifying the role.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * Creation date of the IAM role.
     */
    public /*out*/ readonly createDate!: pulumi.Output<string>;
    /**
     * The provider-assigned unique ID for this managed resource..
     */
    public /*out*/ readonly id!: pulumi.Output<string>;
    /**
     * Stable and unique string identifying the role.
     */
    public /*out*/ readonly uniqueId!: pulumi.Output<string>;

    /**
     * Create a AssumableRole resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AssumableRoleArgs, opts?: pulumi.ComponentResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.assumeRolePolicy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'assumeRolePolicy'");
            }
            resourceInputs["assumeRolePolicy"] = args ? args.assumeRolePolicy : undefined;
            resourceInputs["attachAdminPolicy"] = args ? args.attachAdminPolicy : undefined;
            resourceInputs["attachPowerUserPolicy"] = args ? args.attachPowerUserPolicy : undefined;
            resourceInputs["attachReadOnlyPolicy"] = args ? args.attachReadOnlyPolicy : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["createDate"] = undefined /*out*/;
            resourceInputs["id"] = undefined /*out*/;
            resourceInputs["uniqueId"] = undefined /*out*/;
        } else {
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["createDate"] = undefined /*out*/;
            resourceInputs["id"] = undefined /*out*/;
            resourceInputs["uniqueId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AssumableRole.__pulumiType, name, resourceInputs, opts, true /*remote*/);
    }
}

/**
 * The set of arguments for constructing a AssumableRole resource.
 */
export interface AssumableRoleArgs {
    /**
     * Policy that grants an entity permission to assume the role.
     */
    assumeRolePolicy: pulumi.Input<string>;
    /**
     * Whether to attach a predefined aws admin policy
     */
    attachAdminPolicy?: pulumi.Input<boolean>;
    /**
     * Whether to attach a predefined aws poweruser policy
     */
    attachPowerUserPolicy?: pulumi.Input<boolean>;
    /**
     * Whether to attach a predefined aws readonly policy
     */
    attachReadOnlyPolicy?: pulumi.Input<boolean>;
}
