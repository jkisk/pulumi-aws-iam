# coding=utf-8
# *** WARNING: this file was generated by Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
import pulumi_aws

__all__ = ['IamRoleForServiceAccountArgs', 'IamRoleForServiceAccount']

@pulumi.input_type
class IamRoleForServiceAccountArgs:
    def __init__(__self__, *,
                 namespace: pulumi.Input[str],
                 provider_arn: pulumi.Input[str],
                 service_account: pulumi.Input[str],
                 role_path: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a IamRoleForServiceAccount resource.
        :param pulumi.Input[str] namespace: The EKS namespace that will use the role for IAM authentication.
        :param pulumi.Input[str] provider_arn: The OIDC provider ARN.
        :param pulumi.Input[str] service_account: The EKS service account that will use the role for IAM authentication.
        :param pulumi.Input[str] role_path: The IAM path where the role exists.
        """
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "provider_arn", provider_arn)
        pulumi.set(__self__, "service_account", service_account)
        if role_path is not None:
            pulumi.set(__self__, "role_path", role_path)

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[str]:
        """
        The EKS namespace that will use the role for IAM authentication.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[str]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter(name="providerArn")
    def provider_arn(self) -> pulumi.Input[str]:
        """
        The OIDC provider ARN.
        """
        return pulumi.get(self, "provider_arn")

    @provider_arn.setter
    def provider_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "provider_arn", value)

    @property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> pulumi.Input[str]:
        """
        The EKS service account that will use the role for IAM authentication.
        """
        return pulumi.get(self, "service_account")

    @service_account.setter
    def service_account(self, value: pulumi.Input[str]):
        pulumi.set(self, "service_account", value)

    @property
    @pulumi.getter(name="rolePath")
    def role_path(self) -> Optional[pulumi.Input[str]]:
        """
        The IAM path where the role exists.
        """
        return pulumi.get(self, "role_path")

    @role_path.setter
    def role_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_path", value)


class IamRoleForServiceAccount(pulumi.ComponentResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 provider_arn: Optional[pulumi.Input[str]] = None,
                 role_path: Optional[pulumi.Input[str]] = None,
                 service_account: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a IamRoleForServiceAccount resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] namespace: The EKS namespace that will use the role for IAM authentication.
        :param pulumi.Input[str] provider_arn: The OIDC provider ARN.
        :param pulumi.Input[str] role_path: The IAM path where the role exists.
        :param pulumi.Input[str] service_account: The EKS service account that will use the role for IAM authentication.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IamRoleForServiceAccountArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a IamRoleForServiceAccount resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param IamRoleForServiceAccountArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IamRoleForServiceAccountArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 provider_arn: Optional[pulumi.Input[str]] = None,
                 role_path: Optional[pulumi.Input[str]] = None,
                 service_account: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is not None:
            raise ValueError('ComponentResource classes do not support opts.id')
        else:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IamRoleForServiceAccountArgs.__new__(IamRoleForServiceAccountArgs)

            if namespace is None and not opts.urn:
                raise TypeError("Missing required property 'namespace'")
            __props__.__dict__["namespace"] = namespace
            if provider_arn is None and not opts.urn:
                raise TypeError("Missing required property 'provider_arn'")
            __props__.__dict__["provider_arn"] = provider_arn
            __props__.__dict__["role_path"] = role_path
            if service_account is None and not opts.urn:
                raise TypeError("Missing required property 'service_account'")
            __props__.__dict__["service_account"] = service_account
            __props__.__dict__["role"] = None
        super(IamRoleForServiceAccount, __self__).__init__(
            'awsIam:index:IamRoleForServiceAccount',
            resource_name,
            __props__,
            opts,
            remote=True)

    @property
    @pulumi.getter
    def role(self) -> pulumi.Output['pulumi_aws.iam.Role']:
        """
        The IAM role created
        """
        return pulumi.get(self, "role")

